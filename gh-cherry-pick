#!/usr/bin/env bash

# Copyright 2015 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is modified to decouple with Kubernetes.

# Copyright 2021 tison <wander4096@gmail.com>.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset
set -o pipefail

REPO_ROOT="$(git rev-parse --show-toplevel)"
cd "${REPO_ROOT}"

STARTINGBRANCH=$(git symbolic-ref --short HEAD)
REBASEMAGIC="${REPO_ROOT}/.git/rebase-apply"
DRY_RUN=${DRY_RUN:-""}
EDIT_BODY=${EDIT_BODY:-""}
EDIT_TITLE=${EDIT_TITLE:-""}
GIT_AM_OPTS=${GIT_AM_OPTS:-"-3"}
ALLY=${ALLY:-""}
UPSTREAM_REMOTE=${UPSTREAM_REMOTE:-upstream}
FORK_REMOTE=${FORK_REMOTE:-origin}
MAIN_REPO_ORG=${MAIN_REPO_ORG:-$(git remote get-url "$UPSTREAM_REMOTE" | awk '{gsub(/http[s]:\/\/|git@/,"")}1' | awk -F'[@:./]' 'NR==1{print $3}')}
MAIN_REPO_NAME=${MAIN_REPO_NAME:-$(git remote get-url "$UPSTREAM_REMOTE" | awk '{gsub(/http[s]:\/\/|git@/,"")}1' | awk -F'[@:./]' 'NR==1{print $4}')}

if [[ -z ${GITHUB_USER:-} ]]; then
    echo "!!! Please export GITHUB_USER=<your-user> (or GH organization, if that's where your fork lives)"
    exit 1
fi

if [[ "$#" -lt 2 ]]; then
    B="gh cherry-pick"
    echo "$B <remote branch> <pr-number>...: cherry pick one or more <pr> onto <remote branch> and leave instructions for proposing pull request"
    echo
    echo "  Checks out <remote branch> and handles the cherry-pick of <pr> (possibly multiple) for you."
    echo "  Examples:"
    echo "    $B upstream/release-3.14 12345        # Cherry-picks PR 12345 onto upstream/release-3.14 and proposes that as a PR."
    echo "    $B upstream/release-3.14 12345 56789  # Cherry-picks PR 12345, then 56789 and proposes the combination as a single PR."
    echo
    echo "  Set DRY_RUN=1 to skip git push and creating PR."
    echo "  This is useful for creating patches to a release branch without making a PR."
    echo "  When DRY_RUN is set the script will leave you in a branch containing the commits you cherry-picked."
    echo
    echo "  Set UPSTREAM_REMOTE (default: 'upstream') and FORK_REMOTE (default: 'origin')"
    echo "  to override the default remote names to what you have locally."
    echo
    echo "  Set GIT_AM_OPTS (default: '-3') to overwrite options when running 'git am'."
    echo "  Set ALLY=1 to answer all confirmation as 'y'."
    echo "  Set EDIT_BODY=1 to edit, other value to overwrite PR body."
    echo "  Set EDIT_TITLE=1 to edit, other value to overwrite PR title."
    exit 2
fi

if ! command -v gh > /dev/null; then
    echo "!!! Can't find 'gh' tool in PATH, please install from https://github.com/cli/cli"
    exit 1
fi

if ! gh auth status 2> /dev/null; then
    echo "!!! You aren't logged in with a GitHub host."
    exit 1
fi

if git_status=$(git status --porcelain --untracked=no 2>/dev/null) && [[ -n "${git_status}" ]]; then
    echo "!!! Dirty tree. Clean up and try again."
    exit 1
fi

if [[ -e "${REBASEMAGIC}" ]]; then
    echo "!!! 'git rebase' or 'git am' in progress. Clean up and try again."
    exit 1
fi

declare -r TMP="$(mktemp -d)"

declare -r BRANCH="$1"
shift 1
declare -r PULLS=( "$@" )

function join { local IFS="$1"; shift; echo "$*"; }
declare -r PULLDASH=$(join - "${PULLS[@]/#/#}") # Generates something like "#12345-#56789"
declare -r PULLSUBJ=$(join " " "${PULLS[@]/#/#}") # Generates something like "#12345 #56789"

echo "+++ Updating remotes..."
git remote update -p "${UPSTREAM_REMOTE}" "${FORK_REMOTE}"

if ! git log -n1 --format=%H "${BRANCH}" >/dev/null 2>&1; then
    echo "!!! '${BRANCH}' not found. It needs to be a valid, existing remote branch that I can 'git checkout'."
    exit 1
fi

declare -r NEWBRANCHREQ="automated-cherry-pick-of-${PULLDASH}"
declare -r NEWBRANCH="$(echo "${NEWBRANCHREQ}-${BRANCH}" | sed 's/\//-/g')"
declare -r NEWBRANCHUNIQ="${NEWBRANCH}-$(date +%s)"
echo "+++ Creating local branch ${NEWBRANCHUNIQ}"

cleanbranch=""
gitamcleanup=false
function return_to_kansas {
    if [[ "${gitamcleanup}" == "true" ]]; then
        echo
        echo "+++ Aborting in-progress git am."
        git am --abort >/dev/null 2>&1 || true
    fi

    # return to the starting branch and delete the PR text file
    if [[ -z "${DRY_RUN}" ]]; then
        echo
        echo "+++ Returning you to the ${STARTINGBRANCH} branch and cleaning up."
        git checkout -f "${STARTINGBRANCH}" >/dev/null 2>&1 || true
        if [[ -n "${cleanbranch}" ]]; then
            git branch -D "${cleanbranch}" >/dev/null 2>&1 || true
        fi
    fi
}
trap return_to_kansas EXIT

git checkout -b "${NEWBRANCHUNIQ}" "${BRANCH}"
cleanbranch="${NEWBRANCHUNIQ}"

SUBJECTS=()

gitamcleanup=true
for pull in "${PULLS[@]}"; do
    echo "+++ Downloading patch to ${TMP}/${pull}.patch (in case you need to do this again)"

    curl -o "${TMP}/${pull}.patch" -sSL "https://github.com/${MAIN_REPO_ORG}/${MAIN_REPO_NAME}/pull/${pull}.patch"
    echo
    echo "+++ About to attempt cherry pick of PR. To reattempt:"
    echo "  $ git am ${GIT_AM_OPTS} ${TMP}/${pull}.patch"
    echo
    git am ${GIT_AM_OPTS} "${TMP}/${pull}.patch" || {
        conflicts=false
            while unmerged=$(git status --porcelain | grep ^U) && [[ -n ${unmerged} ]] \
            || [[ -e "${REBASEMAGIC}" ]]; do
                conflicts=true # <-- We should have detected conflicts once
                echo
                echo "+++ Conflicts detected:"
                echo
                (git status --porcelain | grep ^U) || echo "!!! None. Did you git am --continue?"
                echo
                echo "+++ Please resolve the conflicts in another window (and remember to 'git add / git am --continue')"
                read -p "+++ Proceed (anything but 'y' aborts the cherry-pick)? [y/n] " -r
                echo
                if ! [[ "${REPLY}" =~ ^[yY]$ ]]; then
                    echo "Aborting." >&2
                    exit 1
                fi
            done

        if [[ "${conflicts}" != "true" ]]; then
            echo "!!! git am failed, likely because of an in-progress 'git am' or 'git rebase'"
            exit 1
        fi
    }

    # set the subject
    subject=$(grep -m 1 "^Subject" "${TMP}/${pull}.patch" | sed -e 's/Subject: \[PATCH//g' | sed 's/.*] //')
    SUBJECTS+=("#${pull}: ${subject}")

    rm -f "${TMP}/${pull}.patch"
done
gitamcleanup=false

if [[ -n "${DRY_RUN}" ]]; then
    echo "!!! Skipping git push and PR creation because you set DRY_RUN."
    echo "To return to the branch you were in when you invoked this script:"
    echo
    echo "  git checkout ${STARTINGBRANCH}"
    echo
    echo "To delete this branch:"
    echo
    echo "  git branch -D ${NEWBRANCHUNIQ}"
    exit 0
fi

function make-a-pr() {
    local rel
    rel="$(basename "${BRANCH}")"
    echo
    echo "+++ Creating a pull request on GitHub at ${GITHUB_USER}:${NEWBRANCH}"

    local numandtitle
    numandtitle=$(printf '%s\n' "${SUBJECTS[@]}")

    # prepare pr title
    echo -e "Automated cherry pick of ${numandtitle}" > "${TMP}/pr-title"
    if [[ "${EDIT_TITLE}" =~ ^[1]$ ]]; then
        "${EDITOR:-vi}" "${TMP}/pr-title"
    elif [[ -n "${EDIT_TITLE}" ]]; then
        echo -e "${EDIT_TITLE}" > "${TMP}/pr-title"
    fi
    prtitle=$(cat "${TMP}/pr-title")

    # prepare pr body
    cat > "${TMP}/pr-body" <<EOF
Cherry pick of ${PULLSUBJ} on ${rel}.
${numandtitle}
EOF
    if [[ "${EDIT_BODY}" =~ ^[1]$ ]]; then
        "${EDITOR:-vi}" "${TMP}/pr-body"
    elif [[ -n "${EDIT_BODY}" ]]; then
        echo -e "${EDIT_BODY}" > "${TMP}/pr-body"
    fi
    prbody=$(cat "${TMP}/pr-body")

    gh pr create --title="${prtitle}" --body="${prbody}" --head "${GITHUB_USER}:${NEWBRANCH}" --base "${rel}" --repo="${MAIN_REPO_ORG}/${MAIN_REPO_NAME}"
}

function confirm() {
    if [[ -z "${ALLY}" ]]; then
        read -p "+++ Proceed (anything but 'y' aborts the cherry-pick)? [y/n] " -r
        if ! [[ "${REPLY}" =~ ^[yY]$ ]]; then
            echo "Aborting." >&2
            exit 1
        fi
    fi
}

if git remote -v | grep ^"${FORK_REMOTE}" | grep "${MAIN_REPO_ORG}/${MAIN_REPO_NAME}.git"; then
    echo "!!! You have ${FORK_REMOTE} configured as your ${MAIN_REPO_ORG}/${MAIN_REPO_NAME}.git"
    echo "This isn't normal. Leaving you with push instructions:"
    echo
    echo "+++ First manually push the branch this script created:"
    echo
    echo "  git push REMOTE ${NEWBRANCHUNIQ}:${NEWBRANCH}"
    echo
    echo "where REMOTE is your personal fork (maybe ${UPSTREAM_REMOTE}? Consider swapping those.)."
    echo "OR consider setting UPSTREAM_REMOTE and FORK_REMOTE to different values."
    echo
    confirm
    make-a-pr
    cleanbranch=""
    exit 0
fi

echo
echo "+++ I'm about to do the following to push to GitHub (and I'm assuming ${FORK_REMOTE} is your personal fork):"
echo
echo "  git push ${FORK_REMOTE} ${NEWBRANCHUNIQ}:${NEWBRANCH}"
echo

confirm
git push "${FORK_REMOTE}" -f "${NEWBRANCHUNIQ}:${NEWBRANCH}"
make-a-pr
